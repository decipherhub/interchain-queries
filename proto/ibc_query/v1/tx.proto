syntax = "proto3";

package ibc_query.v1;

option go_package = "github.com/cosmos/interchain-queries/x/ibc_query/types";

import "gogoproto/gogo.proto";
import "ibc/core/client/v1/client.proto";
import "ibc_query/v1/crosschainquery.proto";
import "cosmos/capability/v1beta1/capability.proto";
import "proofs.proto";

// Msg
service Msg {
  // submit query request
  rpc SubmitCrossChainQuery(MsgSubmitCrossChainQuery)
      returns (MsgSubmitCrossChainQueryResponse);
  // submit query result
  rpc SubmitCrossChainQueryResult(MsgSubmitCrossChainQueryResult)
      returns (MsgSubmitCrossChainQueryResultResponse);
  // retrieve the result and delete it
  rpc SubmitPruneCrossChainQueryResult(MsgSubmitPruneCrossChainQueryResult)
      returns (MsgSubmitPruneCrossChainQueryResultResponse);
}

// MsgSubmitCrossChainQuery
message MsgSubmitCrossChainQuery {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string path = 1;
  ibc.core.client.v1.Height local_timeout_height = 2 [
    (gogoproto.moretags) = "yaml:\"timeout_height\"",
    (gogoproto.nullable) = false
  ];
  uint64 local_timeout_stamp = 3;
  uint64 query_height = 4;
  string chain_id = 5;
  string sender = 6;
}

// MsgSubmitCrossChainQueryResponse
message MsgSubmitCrossChainQueryResponse {
  string id = 1;
  cosmos.capability.v1beta1.Capability cap_key = 2;
}

// MsgSubmitCrossChainQueryResult
message MsgSubmitCrossChainQueryResult {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  string id = 1;
  string path = 2;
  uint64 query_height = 3;
  QueryResult result = 4;
  bytes data = 5;
  string sender = 6;
  repeated ics23.ProofSpec proof_specs =
      7; // TODO: Proof specifications used in verifying counterparty state
}

// MsgSubmitCrossChainQueryResultResponse
message MsgSubmitCrossChainQueryResultResponse {}

// MsgSubmitPruneCrossChainQueryResult
message MsgSubmitPruneCrossChainQueryResult {
  string id = 1;
  cosmos.capability.v1beta1.Capability cap_key = 2;
}

// MsgSubmitPruneCrossChainQueryResultResponse
message MsgSubmitPruneCrossChainQueryResultResponse {
  string id = 1;
  QueryResult result = 2;
  bytes data = 3;
}