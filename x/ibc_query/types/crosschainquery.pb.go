// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc_query/v1/crosschainquery.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/ibc-go/v5/modules/core/02-client/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryResult
type QueryResult int32

const (
	// UNSPECIFIED
	QueryResult_QUERY_RESULT_UNSPECIFIED QueryResult = 0
	// SUCCESS
	QueryResult_QUERY_RESULT_SUCCESS QueryResult = 1
	// FAILURE
	QueryResult_QUERY_RESULT_FAILURE QueryResult = 2
	// TIMEOUT
	QueryResult_QUERY_RESULT_TIMEOUT QueryResult = 3
)

var QueryResult_name = map[int32]string{
	0: "QUERY_RESULT_UNSPECIFIED",
	1: "QUERY_RESULT_SUCCESS",
	2: "QUERY_RESULT_FAILURE",
	3: "QUERY_RESULT_TIMEOUT",
}

var QueryResult_value = map[string]int32{
	"QUERY_RESULT_UNSPECIFIED": 0,
	"QUERY_RESULT_SUCCESS":     1,
	"QUERY_RESULT_FAILURE":     2,
	"QUERY_RESULT_TIMEOUT":     3,
}

func (x QueryResult) String() string {
	return proto.EnumName(QueryResult_name, int32(x))
}

func (QueryResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e02bfc94b91b4ad7, []int{0}
}

// CrossChainQuery
type CrossChainQuery struct {
	Id                    string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Path                  string       `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	LocalTimeoutHeight    types.Height `protobuf:"bytes,3,opt,name=local_timeout_height,json=localTimeoutHeight,proto3" json:"local_timeout_height" yaml:"timeout_height"`
	LocalTimeoutTimestamp uint64       `protobuf:"varint,4,opt,name=local_timeout_timestamp,json=localTimeoutTimestamp,proto3" json:"local_timeout_timestamp,omitempty"`
	QueryHeight           uint64       `protobuf:"varint,5,opt,name=query_height,json=queryHeight,proto3" json:"query_height,omitempty"`
	ChainId               string       `protobuf:"bytes,6,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *CrossChainQuery) Reset()         { *m = CrossChainQuery{} }
func (m *CrossChainQuery) String() string { return proto.CompactTextString(m) }
func (*CrossChainQuery) ProtoMessage()    {}
func (*CrossChainQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02bfc94b91b4ad7, []int{0}
}
func (m *CrossChainQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainQuery.Merge(m, src)
}
func (m *CrossChainQuery) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainQuery.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainQuery proto.InternalMessageInfo

func (m *CrossChainQuery) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CrossChainQuery) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CrossChainQuery) GetLocalTimeoutHeight() types.Height {
	if m != nil {
		return m.LocalTimeoutHeight
	}
	return types.Height{}
}

func (m *CrossChainQuery) GetLocalTimeoutTimestamp() uint64 {
	if m != nil {
		return m.LocalTimeoutTimestamp
	}
	return 0
}

func (m *CrossChainQuery) GetQueryHeight() uint64 {
	if m != nil {
		return m.QueryHeight
	}
	return 0
}

func (m *CrossChainQuery) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

// CrossChainQueryResult
type CrossChainQueryResult struct {
	Id     string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Result QueryResult `protobuf:"varint,2,opt,name=result,proto3,enum=ibc_query.v1.QueryResult" json:"result,omitempty"`
	Data   []byte      `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *CrossChainQueryResult) Reset()         { *m = CrossChainQueryResult{} }
func (m *CrossChainQueryResult) String() string { return proto.CompactTextString(m) }
func (*CrossChainQueryResult) ProtoMessage()    {}
func (*CrossChainQueryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02bfc94b91b4ad7, []int{1}
}
func (m *CrossChainQueryResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainQueryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainQueryResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainQueryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainQueryResult.Merge(m, src)
}
func (m *CrossChainQueryResult) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainQueryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainQueryResult.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainQueryResult proto.InternalMessageInfo

func (m *CrossChainQueryResult) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CrossChainQueryResult) GetResult() QueryResult {
	if m != nil {
		return m.Result
	}
	return QueryResult_QUERY_RESULT_UNSPECIFIED
}

func (m *CrossChainQueryResult) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("ibc_query.v1.QueryResult", QueryResult_name, QueryResult_value)
	proto.RegisterType((*CrossChainQuery)(nil), "ibc_query.v1.CrossChainQuery")
	proto.RegisterType((*CrossChainQueryResult)(nil), "ibc_query.v1.CrossChainQueryResult")
}

func init() {
	proto.RegisterFile("ibc_query/v1/crosschainquery.proto", fileDescriptor_e02bfc94b91b4ad7)
}

var fileDescriptor_e02bfc94b91b4ad7 = []byte{
	// 464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xc1, 0x6e, 0xd3, 0x4c,
	0x14, 0x85, 0x6d, 0x37, 0x7f, 0x7e, 0x98, 0x44, 0x25, 0xb2, 0x12, 0xe1, 0x46, 0xe0, 0x04, 0xaf,
	0x22, 0x24, 0x3c, 0x4a, 0x91, 0xba, 0x60, 0x47, 0x8d, 0x2b, 0x2c, 0x15, 0x68, 0xc7, 0xf6, 0x02,
	0x36, 0x96, 0x3d, 0x1e, 0xc5, 0x23, 0xec, 0x4c, 0xb0, 0x27, 0x11, 0x79, 0x0b, 0x96, 0x3c, 0x52,
	0x97, 0x5d, 0xb2, 0xaa, 0x50, 0xf2, 0x06, 0x3c, 0x01, 0xf2, 0x4d, 0x0a, 0x09, 0x59, 0xf9, 0xfa,
	0x9e, 0x73, 0xcf, 0xf5, 0x7c, 0x1e, 0x64, 0xf1, 0x84, 0x46, 0x5f, 0xe6, 0xac, 0x5c, 0xe2, 0xc5,
	0x18, 0xd3, 0x52, 0x54, 0x15, 0xcd, 0x62, 0x3e, 0x85, 0x96, 0x3d, 0x2b, 0x85, 0x14, 0x7a, 0xfb,
	0x8f, 0xc7, 0x5e, 0x8c, 0xfb, 0xdd, 0x89, 0x98, 0x08, 0x10, 0x70, 0x5d, 0x6d, 0x3c, 0xfd, 0x01,
	0x4f, 0x28, 0xa6, 0xa2, 0x64, 0x98, 0xe6, 0x9c, 0x4d, 0x25, 0xa4, 0x41, 0xb5, 0x31, 0x58, 0xdf,
	0x35, 0xf4, 0xc8, 0xa9, 0xe3, 0x9d, 0x3a, 0xfe, 0xba, 0x4e, 0xd3, 0x8f, 0x91, 0xc6, 0x53, 0x43,
	0x1d, 0xaa, 0xa3, 0x87, 0x44, 0xe3, 0xa9, 0xae, 0xa3, 0xc6, 0x2c, 0x96, 0x99, 0xa1, 0x41, 0x07,
	0x6a, 0xfd, 0x33, 0xea, 0xe6, 0x82, 0xc6, 0x79, 0x24, 0x79, 0xc1, 0xc4, 0x5c, 0x46, 0x19, 0xe3,
	0x93, 0x4c, 0x1a, 0x47, 0x43, 0x75, 0xd4, 0x3a, 0xed, 0xdb, 0x3c, 0xa1, 0x76, 0xbd, 0xd7, 0xde,
	0x6e, 0x5b, 0x8c, 0xed, 0xb7, 0xe0, 0x38, 0x7f, 0x7a, 0x73, 0x37, 0x50, 0x7e, 0xdd, 0x0d, 0x7a,
	0xcb, 0xb8, 0xc8, 0x5f, 0x59, 0xfb, 0xf3, 0x16, 0xd1, 0x21, 0x36, 0xd8, 0x74, 0x37, 0x23, 0xfa,
	0x19, 0x7a, 0xbc, 0xbf, 0xac, 0x7e, 0x56, 0x32, 0x2e, 0x66, 0x46, 0x63, 0xa8, 0x8e, 0x1a, 0xa4,
	0xb7, 0x3b, 0x14, 0xdc, 0x8b, 0xfa, 0x33, 0xd4, 0x06, 0x3e, 0xf7, 0x1f, 0xf7, 0x1f, 0x98, 0x5b,
	0xd0, 0xdb, 0x46, 0x9f, 0xa0, 0x07, 0x00, 0x36, 0xe2, 0xa9, 0xd1, 0x84, 0xf3, 0xfd, 0x0f, 0xef,
	0x5e, 0x6a, 0x4d, 0x51, 0xef, 0x1f, 0x32, 0x84, 0x55, 0xf3, 0x5c, 0x1e, 0xf0, 0x19, 0xa3, 0x66,
	0x09, 0x0a, 0x10, 0x3a, 0x3e, 0x3d, 0xb1, 0x77, 0xff, 0x8c, 0xbd, 0x33, 0x4a, 0xb6, 0xc6, 0x1a,
	0x69, 0x1a, 0xcb, 0x18, 0x70, 0xb5, 0x09, 0xd4, 0xcf, 0x97, 0xa8, 0xb5, 0xbb, 0xe5, 0x09, 0x32,
	0xae, 0x43, 0x97, 0x7c, 0x8c, 0x88, 0xeb, 0x87, 0x97, 0x41, 0x14, 0xbe, 0xf7, 0xaf, 0x5c, 0xc7,
	0xbb, 0xf0, 0xdc, 0x37, 0x1d, 0x45, 0x37, 0x50, 0x77, 0x4f, 0xf5, 0x43, 0xc7, 0x71, 0x7d, 0xbf,
	0xa3, 0x1e, 0x28, 0x17, 0xaf, 0xbd, 0xcb, 0x90, 0xb8, 0x1d, 0xed, 0x40, 0x09, 0xbc, 0x77, 0xee,
	0x87, 0x30, 0xe8, 0x1c, 0x9d, 0x5f, 0xdd, 0xac, 0x4c, 0xf5, 0x76, 0x65, 0xaa, 0x3f, 0x57, 0xa6,
	0xfa, 0x6d, 0x6d, 0x2a, 0xb7, 0x6b, 0x53, 0xf9, 0xb1, 0x36, 0x95, 0x4f, 0x67, 0x13, 0x2e, 0xb3,
	0x79, 0x62, 0x53, 0x51, 0x60, 0x2a, 0xaa, 0x42, 0x54, 0x98, 0x4f, 0x25, 0x2b, 0x01, 0xd2, 0x8b,
	0xfa, 0x8c, 0x9c, 0x55, 0xf8, 0x2b, 0xfe, 0x7b, 0x5f, 0xe5, 0x72, 0xc6, 0xaa, 0xa4, 0x09, 0xd7,
	0xeb, 0xe5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd0, 0x0e, 0x08, 0x6b, 0xc9, 0x02, 0x00, 0x00,
}

func (m *CrossChainQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintCrosschainquery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x32
	}
	if m.QueryHeight != 0 {
		i = encodeVarintCrosschainquery(dAtA, i, uint64(m.QueryHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.LocalTimeoutTimestamp != 0 {
		i = encodeVarintCrosschainquery(dAtA, i, uint64(m.LocalTimeoutTimestamp))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.LocalTimeoutHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCrosschainquery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintCrosschainquery(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCrosschainquery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CrossChainQueryResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainQueryResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainQueryResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintCrosschainquery(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Result != 0 {
		i = encodeVarintCrosschainquery(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCrosschainquery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCrosschainquery(dAtA []byte, offset int, v uint64) int {
	offset -= sovCrosschainquery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CrossChainQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCrosschainquery(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovCrosschainquery(uint64(l))
	}
	l = m.LocalTimeoutHeight.Size()
	n += 1 + l + sovCrosschainquery(uint64(l))
	if m.LocalTimeoutTimestamp != 0 {
		n += 1 + sovCrosschainquery(uint64(m.LocalTimeoutTimestamp))
	}
	if m.QueryHeight != 0 {
		n += 1 + sovCrosschainquery(uint64(m.QueryHeight))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovCrosschainquery(uint64(l))
	}
	return n
}

func (m *CrossChainQueryResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCrosschainquery(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovCrosschainquery(uint64(m.Result))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCrosschainquery(uint64(l))
	}
	return n
}

func sovCrosschainquery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCrosschainquery(x uint64) (n int) {
	return sovCrosschainquery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CrossChainQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrosschainquery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainquery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainquery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainquery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainquery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalTimeoutHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrosschainquery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainquery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LocalTimeoutHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalTimeoutTimestamp", wireType)
			}
			m.LocalTimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalTimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryHeight", wireType)
			}
			m.QueryHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainquery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainquery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrosschainquery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrosschainquery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossChainQueryResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrosschainquery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainQueryResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainQueryResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainquery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainquery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= QueryResult(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCrosschainquery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainquery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrosschainquery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrosschainquery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrosschainquery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrosschainquery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrosschainquery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrosschainquery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCrosschainquery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCrosschainquery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCrosschainquery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCrosschainquery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrosschainquery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCrosschainquery = fmt.Errorf("proto: unexpected end of group")
)
